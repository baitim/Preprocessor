#define PUSH(arg) stack_push(&stack, arg)
#define POP(arg) stack_pop(&stack, arg)

DEF_CMD(PUSH, 43, 1, {
    int value_elem = *((int *)commands + number_command);
    number_command++;

    int is_reg = 0;
    for (int i = 0; i < COUNT_REGISTERS; i++) {
        if (REGISTERS[i].index == value_elem) {
            PUSH(REGISTERS[i].value);
            is_reg = 1;
            break;
        }
    }

    if (!is_reg) PUSH(value_elem);
    break;})

DEF_CMD(IN, 2, 0, {
    printf(print_lyellow("Input element: "));
    int x = 0;
    int count_input_ = scanf("%d", &x);
    assert(count_input_ == 1);
    PUSH(x);
    break;})

DEF_CMD(POP, 33, 1, {
    int name_reg = *((int *)commands + number_command);
    number_command++;

    int x = 0;
    POP(&x);

    for (int i = 0; i < COUNT_REGISTERS; i++) {
        if (REGISTERS[i].index == name_reg) {
            REGISTERS[i].value = x;
            break;
        }
    }
    break;})

DEF_CMD(ADD, 4, 0, {
    int x = 0;
    int y = 0;
    PUSH((POP(&x), x) + (POP(&y), y));
    break;})

DEF_CMD(SUB, 5, 0, {
    int x = 0;
    int y = 0;
    POP(&x);
    POP(&y);
    PUSH(y - x);
    break;})

DEF_CMD(MUL, 6, 0, {
    int x = 0;
    int y = 0;
    PUSH((POP(&x), x) * (POP(&y), y));
    break;})

DEF_CMD(DIV, 7, 0, {
    int x = 0;
    int y = 0;
    POP(&x);
    POP(&y);
    PUSH(y / x);
    break;})

DEF_CMD(SQRT, 8, 0, {
    int x = 0;
    PUSH((type_el)sqrt((POP(&x), x)));
    break;})

DEF_CMD(SIN, 9, 0, {
    int x = 0;
    PUSH((type_el)sin((POP(&x), x)));
    break;})

DEF_CMD(COS, 10, 0, {
    int x = 0;
    PUSH((type_el)cos((POP(&x), x)));
    break;})

DEF_CMD(OUT, 11, 0, {
    int answer = 0;
    printf(print_lgreen("Answer = "));
    printf(print_lcyan("%d\n"), (POP(&answer), answer));
    break;})

DEF_CMD(HLT, 12, 0, {
    return;
    break;})